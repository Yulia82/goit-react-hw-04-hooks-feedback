{"version":3,"sources":["components/Statistics/Statistics.styled.jsx","components/Statistics/StatisticsItem.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.styles.jsx","components/FeedbackOptions/FeedbackOptions.js","components/SectionTitle/SectionTitle.styles.jsx","components/SectionTitle/SectionTitle.js","components/Notification/Notification.styles.jsx","components/Notification/Notification.js","components/Wrapper/Wrapper.styles.jsx","components/App/App.js","index.js"],"names":["ItemStatistic","styled","li","ListStatistic","ul","ValueStatistic","span","StatisticsItem","label","value","Statistics","stateObj","total","positivePercentage","Object","keys","map","property","ContainerBtn","div","Btn","button","FeedbackOptions","options","onLeaveFeedback","option","name","type","onClick","TitleSection","h2","SectionTitle","title","children","Notif","p","Notification","message","Wrapper","App","useState","good","setGood","neutral","setNeutral","bad","setBad","countTotalFeedback","evt","target","prevState","percent","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAEaA,EAAgBC,IAAOC,GAAV,iDAIbC,EAAgBF,IAAOG,GAAV,4EAKbC,EAAiBJ,IAAOK,KAAV,wG,OCRdC,EAAiB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACtC,OACE,eAACT,EAAD,WACE,eAACK,EAAD,WAAiBG,EAAjB,OACCC,MCwBQC,EA3BI,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBACrC,OACE,eAACV,EAAD,WACGW,OAAOC,KAAKJ,GAAUK,KAAI,SAAAC,GAAQ,OACjC,cAAC,EAAD,CAEET,MAAOS,EACPR,MAAOE,EAAS,GAAD,OAAIM,KAFdA,MAMT,cAAC,EAAD,CAA4BT,MAAM,QAAQC,MAAOG,KAA7B,SACpB,cAAC,EAAD,CAEEJ,MAAM,oBACNC,MAAOI,KAFH,0BCfCK,EAAejB,IAAOkB,IAAV,gFAKZC,EAAMnB,IAAOoB,OAAV,mYCaDC,EAjBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,cAACN,EAAD,UACGK,EAAQP,KAAI,SAAAS,GAAM,OACjB,cAACL,EAAD,CAAkBM,KAAMD,EAAQE,KAAK,SAASC,QAASJ,EAAvD,SACGC,GADOA,SCLLI,EAAe5B,IAAO6B,GAAV,kGCeVC,EAdM,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC7B,OACE,oCACE,cAACJ,EAAD,UAAeG,IACdC,MCLMC,EAAQjC,IAAOkC,EAAV,2ICSHC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,cAACH,EAAD,UAAQG,KCFJC,EAAUrC,IAAOkB,IAAV,mKC6ELoB,MAxEf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsBJ,mBAAS,GAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KAkBMC,EAAqB,WACzB,OAAON,EAAOE,EAAUE,GAoBtBlC,EAAW,CACf8B,OACAE,UACAE,OAGE,OACE,eAACP,EAAD,WACE,cAAC,EAAD,CAAcN,MAAM,wBAApB,SACE,cAAC,EAAD,CACET,QAXO,CAAC,OAAQ,UAAW,OAY3BC,gBAhDc,SAAAwB,GAItB,OAFiBA,EAAIC,OAAbvB,MAGN,IAAK,OAAQgB,GAAQ,SAAAQ,GAAS,OAAIA,EAAY,KAC5C,MACF,IAAK,UAAWN,GAAW,SAAAM,GAAS,OAAIA,EAAY,KAClD,MACF,IAAK,MAAOJ,GAAO,SAAAI,GAAS,OAAIA,EAAY,WA2C1C,cAAC,EAAD,CAAclB,MAAM,YAApB,SAvByB,IAAzBe,IAyBI,cAAC,EAAD,CACEpC,SAAUA,EACVC,MAAOmC,EACPlC,mBArC4B,WACtC,IAAMsC,EAAUC,KAAKC,MACX,IAAPZ,EACCM,KAEJ,MAAM,GAAN,OAAUI,EAAV,QAmCQ,cAAC,EAAD,CAAcd,QAAQ,4BCnElCiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6e63d1a7.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const ItemStatistic = styled.li`\n  margin-top: 10px;\n`;\n\nexport const ListStatistic = styled.ul`\n  margin-top: 10px;\n  padding: 0px 20px 20px;\n`;\n\nexport const ValueStatistic = styled.span`\n  margin-right: 10px;\n  font-weight: bold;\n  text-transform: capitalize;\n`;\n","import { ItemStatistic, ValueStatistic } from \"./Statistics.styled\";\nimport PropTypes from \"prop-types\";\n\nexport const StatisticsItem = ({ label, value }) => {\n  return (\n    <ItemStatistic>\n      <ValueStatistic>{label}:</ValueStatistic>\n      {value}\n    </ItemStatistic>\n  );\n};\n\nStatisticsItem.propTypes = {\n  label: PropTypes.string.isRequired,\n  value: PropTypes.node.isRequired,\n};\n","import { ListStatistic } from \"./Statistics.styled\";\nimport { StatisticsItem } from \"./StatisticsItem\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ stateObj, total, positivePercentage }) => {\n  return (\n    <ListStatistic>\n      {Object.keys(stateObj).map(property => (\n        <StatisticsItem\n          key={property}\n          label={property}\n          value={stateObj[`${property}`]}\n        />\n      ))}\n\n      <StatisticsItem key=\"total\" label=\"Total\" value={total()} />\n      <StatisticsItem\n        key=\"positivePercentage\"\n        label=\"Positive feedback\"\n        value={positivePercentage()}\n      />\n    </ListStatistic>\n  );\n};\n\nStatistics.propTypes = {\n  stateObj: PropTypes.object.isRequired,\n  total: PropTypes.func.isRequired,\n  positivePercentage: PropTypes.func.isRequired,\n};\n\nexport default Statistics;\n\n// import {\n//   ItemStatistic,\n//   ListStatistic,\n//   ValueStatistic,\n// } from \"./Statistics.styled\";\n// import PropTypes from \"prop-types\";\n\n// const Statistics = ({ stateObj, total, positivePercentage }) => {\n//   return (\n//     <ListStatistic>\n//       {Object.keys(stateObj).map(property => (\n//         <ItemStatistic key={property}>\n//           <ValueStatistic>{property}</ValueStatistic>\n//           {stateObj[`${property}`]}\n//         </ItemStatistic>\n//       ))}\n\n//       <ItemStatistic key=\"total\">\n//         <ValueStatistic>Total:</ValueStatistic>\n//         {total(Object.values(stateObj))}\n//       </ItemStatistic>\n//       <ItemStatistic key=\"positivePercentage\">\n//         <ValueStatistic>Positive feedback:</ValueStatistic>\n//         {positivePercentage()}\n//       </ItemStatistic>\n//     </ListStatistic>\n//   );\n// };\n\n// Statistics.propTypes = {\n//   stateObj: PropTypes.object.isRequired,\n//   total: PropTypes.func.isRequired,\n//   positivePercentage: PropTypes.func.isRequired,\n// };\n\n// export default Statistics;\n","import styled from \"@emotion/styled\";\n\nexport const ContainerBtn = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nexport const Btn = styled.button`\n  min-width: 90px;\n  padding: 4px 20px;\n  border-radius: 5px;\n  border: none;\n  background-color: #ffffff;\n  box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\n    0px 2px 2px rgba(0, 0, 0, 0.12);\n\n  font-weight: bold;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: #7ab7f4;\n    color: #ffffff;\n  }\n`;\n","import { Btn, ContainerBtn } from \"./FeedbackOptions.styles\";\nimport PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ContainerBtn>\n      {options.map(option => (\n        <Btn key={option} name={option} type=\"button\" onClick={onLeaveFeedback}>\n          {option}\n        </Btn>\n      ))}\n    </ContainerBtn>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import styled from \"@emotion/styled\";\n\nexport const TitleSection = styled.h2`\n  font-weight: bold;\n  text-align: center;\n\n  padding: 10px 20px;\n`;\n","import { TitleSection } from \"./SectionTitle.styles\";\nimport PropTypes from \"prop-types\";\n\nconst SectionTitle = ({ title, children }) => {\n  return (\n    <section>\n      <TitleSection>{title}</TitleSection>\n      {children}\n    </section>\n  );\n};\n\nSectionTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default SectionTitle;\n","import styled from \"@emotion/styled\";\n\nexport const Notif = styled.p`\n  font-weight: bold;\n  font-size: 20px;\n  text-align: center;\n  color: #4c4c4c;\n\n  padding-bottom: 20px;\n`;\n","import { Notif } from \"./Notification.styles\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return <Notif>{message}</Notif>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  width: 350px;\n  margin-left: auto;\n  margin-right: auto;\n\n  background-color: rgba(238, 238, 238, 0.8);\n  border-radius: 10px;\n`;\n","import { useState } from \"react\";\nimport Statistics from \"../Statistics\";\nimport FeedbackOptions from \"../FeedbackOptions\";\nimport SectionTitle from \"../SectionTitle\";\nimport Notification from \"../Notification\";\nimport { Wrapper } from \"../Wrapper/Wrapper.styles\";\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = evt => {\n    // console.log(evt.target.name);\n    const { name } = evt.target;\n    \n    switch (name) {\n      case 'good': setGood(prevState => prevState + 1);\n        break;\n      case 'neutral': setNeutral(prevState => prevState + 1);\n        break;\n      case 'bad': setBad(prevState => prevState + 1);\n        break;\n      default:\n        break;\n    }\n  };\n    \n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const percent = Math.round(\n      (good * 100) /\n        countTotalFeedback(),\n    );\n    return `${percent}%`;\n  };\n\n  function getStatistic() {\n    if (countTotalFeedback() === 0) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n    \nconst optionsArr = ['good', 'neutral', 'bad'];\nconst stateObj = {\n  good,\n  neutral,\n  bad,\n};\n\n    return (\n      <Wrapper>\n        <SectionTitle title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={optionsArr}\n            onLeaveFeedback={onLeaveFeedback}\n          />\n        </SectionTitle>\n\n        <SectionTitle title=\"Statistic\">\n          {getStatistic() ? (\n            <Statistics\n              stateObj={stateObj}\n              total={countTotalFeedback}\n              positivePercentage={countPositiveFeedbackPercentage}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </SectionTitle>\n      </Wrapper>\n    );\n}\n\nexport default App;\n\n// class App extends Component {\n//   static defaultProps = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   state = {\n//     good: this.props.good,\n//     neutral: this.props.neutral,\n//     bad: this.props.bad,\n//   };\n\n//   onLeaveFeedback = evt => {\n//     this.setState(prevState => ({\n//       [evt.target.name]: prevState[`${evt.target.name}`] + 1,\n//     }));\n//   };\n\n//   countTotalFeedback = () => {\n//     return Object.values(this.state).reduce((sum, current) => sum + current, 0);\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     const percent = Math.round(\n//       (this.state.good * 100) /\n//         this.countTotalFeedback(Object.values(this.state)),\n//     );\n//     return `${percent}%`;\n//   };\n\n//   getStatistic() {\n//     if (this.countTotalFeedback(Object.values(this.state)) === 0) {\n//       return false;\n//     } else {\n//       return true;\n//     }\n//   }\n\n//   render() {\n//     const optionsArr = Object.keys(this.state);\n\n//     return (\n//       <Wrapper>\n//         <SectionTitle title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             // options={Object.keys(this.state)}\n//             options={optionsArr}\n//             onLeaveFeedback={this.onLeaveFeedback}\n//           />\n//         </SectionTitle>\n\n//         <SectionTitle title=\"Statistic\">\n//           {this.getStatistic() ? (\n//             <Statistics\n//               stateObj={this.state}\n//               total={this.countTotalFeedback}\n//               positivePercentage={this.countPositiveFeedbackPercentage}\n//             />\n//           ) : (\n//             <Notification message=\"No feedback given\" />\n//           )}\n//         </SectionTitle>\n//       </Wrapper>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}